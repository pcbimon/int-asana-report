# Example environment variables for ADFS / NextAuth integration

# Base URL of your ADFS issuer (no trailing slash). Example:
# ADFS_ISSUER=https://adfs.example.com/adfs
ADFS_ISSUER=

# OAuth client credentials registered in ADFS
ADFS_CLIENT_ID=
ADFS_CLIENT_SECRET=

# Optional: some ADFS setups require a resource/audience param
# For your case, you mentioned 'allatclaims' as a scope/resource value
ADFS_RESOURCE=

# NextAuth secret (generate a strong random value)
NEXTAUTH_SECRET=

# Public URL of your app (used for redirect URIs). Example: http://localhost:3000
NEXTAUTH_URL=

# AES-256 reversible encryption for Assignee data
# Provide a 32-byte (256-bit) key and a 16-byte IV (initialization vector), both encoded in Base64.
# The application expects the values to be Base64-encoded binary bytes (not hex or passphrases).
# Recommended cipher: AES-256-CBC (or AES-256-GCM if you adapt the code to use an auth tag).
#
# Examples to generate secure random values:
# PowerShell (pwsh) - Windows:
# $k = New-Object byte[] 32; (New-Object System.Security.Cryptography.RNGCryptoServiceProvider).GetBytes($k); [Convert]::ToBase64String($k)
# $i = New-Object byte[] 16; (New-Object System.Security.Cryptography.RNGCryptoServiceProvider).GetBytes($i); [Convert]::ToBase64String($i)
#
# OpenSSL (Linux/macOS/Windows with OpenSSL):
# openssl rand -base64 32   # key (32 random bytes -> AES-256)
# openssl rand -base64 16   # iv  (16 random bytes)
#
# Node (example):
# node -e "const c=require('crypto'); console.log(c.randomBytes(32).toString('base64'))"
# node -e "const c=require('crypto'); console.log(c.randomBytes(16).toString('base64'))"
#
# Security: Do NOT commit these values. Store them in a secure secrets manager or in your local
# `.env.local`. Losing the key will make encrypted data unrecoverable; leaking the key compromises
# all encrypted Assignee data.
ASSIGNEE_ENCRYPTION_KEY=
ASSIGNEE_ENCRYPTION_IV=
